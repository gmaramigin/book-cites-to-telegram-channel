import asyncio
import logging
import random
import json
from datetime import datetime

from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext
)
from notion_client import AsyncClient
from apscheduler.schedulers.background import BackgroundScheduler

# üîë API –¢–æ–∫–µ–Ω—ã
NOTION_TOKEN = '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'
DATABASE_ID = '95d95ad5de6f48dc8b31f3bfe1706645'
TELEGRAM_TOKEN = '7461688626:AAGnm898fTCfy2l7uEi-vudGM9nni6GveZ4'
CHANNEL_ID = '@emaramigin_blog'

# üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
notion = AsyncClient(auth=NOTION_TOKEN)
bot = Bot(token=TELEGRAM_TOKEN)

# üß† –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç–∞–º–∏
quote_pool = []  # –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
used_quotes = []  # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
CACHE_FILE = 'quotes_cache.json'

# üõ°Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# üóÇÔ∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_cache(quotes):
    try:
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(quotes, f, ensure_ascii=False, indent=4)
        logging.info("‚úÖ –¶–∏—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")


def load_cache():
    try:
        with open(CACHE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logging.warning("‚ö†Ô∏è –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Notion.")
        return []


# üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç –∏–∑ Notion —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async def fetch_quotes():
    global quote_pool, used_quotes
    try:
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç.")

        quotes = []
        next_cursor = None

        while True:
            query_params = {'database_id': DATABASE_ID, 'page_size': 100}
            if next_cursor:
                query_params['start_cursor'] = next_cursor

            response = await notion.databases.query(**query_params)
            pages = response['results']

            tasks = [process_notion_page(page) for page in pages]
            results = await asyncio.gather(*tasks)

            for result in results:
                if result:
                    quotes.extend(result)

            next_cursor = response.get('next_cursor')
            if not next_cursor:
                break

        if quotes:
            random.shuffle(quotes)
            quote_pool = quotes
            used_quotes = []
            save_cache(quotes)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(quotes)} —Ü–∏—Ç–∞—Ç –∏–∑ Notion.")
        else:
            logging.warning("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion –Ω–µ—Ç —Ü–∏—Ç–∞—Ç.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç: {e}")


# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion
async def process_notion_page(page):
    try:
        page_id = page['id']
        properties = page['properties']

        author = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
        if 'Author' in properties and properties['Author'].get('title'):
            author = properties['Author']['title'][0]['text']['content']

        book_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞"
        if "The Book's name" in properties and properties["The Book's name"].get('rich_text'):
            book_name = properties["The Book's name"]['rich_text'][0]['text']['content']

        page_content = await notion.blocks.children.list(block_id=page_id)
        book_quotes = []
        for block in page_content['results']:
            if block['type'] == 'quote' and block['quote']['rich_text']:
                for text_block in block['quote']['rich_text']:
                    quote = text_block['text']['content']
                    if quote.strip():
                        book_quotes.append(quote)

        return [{'quote': quote, 'author': author, 'book_name': book_name} for quote in book_quotes]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return []


# üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã
def get_next_quote():
    global quote_pool, used_quotes

    if not quote_pool:
        logging.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç...")
        quote_pool.extend(load_cache())
        if not quote_pool:
            asyncio.run(fetch_quotes())

    if not quote_pool:
        logging.warning("‚ö†Ô∏è –¶–∏—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return None

    next_quote = quote_pool.pop()
    used_quotes.append(next_quote)

    if not quote_pool:
        quote_pool = used_quotes.copy()
        random.shuffle(quote_pool)
        used_quotes = []

    return next_quote


# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ü–∏—Ç–∞—Ç—ã –≤ Telegram-–∫–∞–Ω–∞–ª
async def send_quote_to_channel():
    try:
        quote_data = get_next_quote()

        if quote_data is None:
            await bot.send_message(chat_id=CHANNEL_ID, text="‚ö†Ô∏è –¶–∏—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion.")
            logging.warning("‚ö†Ô∏è –¶–∏—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        else:
            message_template = f"""

üåü *–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è*
‚úçÔ∏è *{quote_data['author']}*
üìñ *{quote_data['book_name']}*

üí¨ _"{quote_data['quote']}"_
"""
            await bot.send_message(chat_id=CHANNEL_ID, text=message_template, parse_mode='Markdown')
            logging.info("‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ü–∏—Ç–∞—Ç—ã: {e}")


# üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìñ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –∫–∞–Ω–∞–ª", callback_data='send_to_channel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –≤ –∫–∞–Ω–∞–ª.', reply_markup=reply_markup)


async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await send_quote_to_channel()


# üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.add_job(lambda: asyncio.run(fetch_quotes()), 'cron', hour=4, minute=41)
scheduler.add_job(lambda: asyncio.run(send_quote_to_channel()), 'cron', hour=4, minute=42)
scheduler.start()


def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(fetch_quotes())

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()


if __name__ == '__main__':
    main()
